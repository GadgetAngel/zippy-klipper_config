###### M600 CONFIGURATION ######
# 
[gcode_macro m600cfg]
##########################################################
# The following variables define the behavior of macros in this file:
variable_default_temp: 220
variable_cooldown: 1
variable_prev_temp: 0
variable_x: 5
variable_y: 223
variable_z: 10
variable_zmin: 150
variable_load_fast: 50
variable_load_slow: 75
variable_unload_length: 75
variable_purge: 50
variable_fast_speed: 1000
variable_park_speed: 9000
variable_output: 118
##########################################################
gcode:
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=default_temp VALUE={default_temp}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=cooldown VALUE={cooldown}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=prev_temp VALUE={prev_temp}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=x VALUE={x}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=y VALUE={y}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=z VALUE={z}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=zmin VALUE={zmin}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=load_fast VALUE={load_fast}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=load_slow VALUE={load_slow}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=unload_length VALUE={unload_length}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=purge VALUE={purge}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=fast_speed VALUE={fast_speed}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=park_speed VALUE={park_speed}
    SET_GCODE_VARIABLE MACRO=m600cfg VARIABLE=output VALUE={output}

###### CHANGE_FILAMENT ######
# 
[gcode_macro CHANGE_FILAMENT]
description: Change the filament in toolhead
gcode:
    HOME_IF_NEEDED
    M600
    UNLOAD_FILAMENT

###### FILAMENT_RUNOUT ######
# 
[gcode_macro FILAMENT_RUNOUT]
description: Procedure when Filament Runout Sensor is triggered
gcode:
    M{printer["gcode_macro m600cfg"].output|int} Filament Runout
    TELEGRAM_FILAMENT_RUNOUT
    SET_IDLE_TIMEOUT TIMEOUT=3600
    change_tune
    ALERT_BEEP_ON
    M600
    {% if printer["gcode_macro m600cfg"].output|int == 1 %}
        SET_GCODE_VARIABLE MACRO=M600 VARIABLE=prev_temp VALUE={printer.extruder.target}
        M109 S0
    {% endif %}

###### M600 ######
# 
[gcode_macro M600]
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=7200 ; Increase idle timeout
    PAUSE ; Pause printing
    _filament_park
    STATUS_M600

[gcode_macro _filament_park]
gcode:
	M{printer["gcode_macro m600cfg"].output|int} Moving hotend to {printer["gcode_macro m600cfg"].x|int}, {printer["gcode_macro m600cfg"].y|int}, {printer["gcode_macro m600cfg"].z|int} ({printer["gcode_macro m600cfg"].zmin|int})
	SET_GCODE_VARIABLE MACRO=JOBCENTER VARIABLE=temperature VALUE={printer.extruder.target}
	{% if printer.toolhead.homed_axes != "xyz" %}
		M{printer["gcode_macro m600cfg"].output|int} Probably not printing. Homing needed ...
		G28
	{% endif %}
    G91
	{% if printer.toolhead.position.z|float + printer["gcode_macro m600cfg"].z|float < printer.configfile.config["stepper_z"]["position_max"]|float %}
		{% if  printer.toolhead.position.z < printer["gcode_macro m600cfg"].zmin|int %}
            G1 Z{printer["gcode_macro m600cfg"].zmin|int|int-printer.toolhead.position.z|int}
		{% else %}
            SAVE_GCODE_STATE NAME=save_state
            G1 Z{printer["gcode_macro m600cfg"].z|int}
            RESTORE_GCODE_STATE NAME=save_state
        {% endif %}
	{% endif%}
	G90
	G1 X{printer["gcode_macro m600cfg"].x|int} Y{printer["gcode_macro m600cfg"].y|int} F{printer["gcode_macro m600cfg"].park_speed|int}


###### UNLOAD_FILAMENT ######
# 
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set LENGTH = params.LENGTH|default(printer["gcode_macro m600cfg"].unload_length)|float %} ; Unload length
    {% set TARGET = params.TARGET|default(printer["gcode_macro m600cfg"].default_temp)|float %} ; Unload temperature
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% if cur_temp|int < TARGET|int %} ; If current temp is below target
        STATUS_HEATING
        M{printer["gcode_macro m600cfg"].output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
        STATUS_HEATING
        M{printer["gcode_macro m600cfg"].output|int} Below minimum temp. Heating extruder...
        M109 S{printer["gcode_macro m600cfg"].default_temp} ; Heat up to default temp
    {% endif %}
    STATUS_M702
    G91 ; Relative positioning
    # Pre-unload
    G1 E5.0 F1200 
    G1 E3.0 F1600
    G1 E-13.14 F7000
    # Unload
    G1 E-{LENGTH} F{printer["gcode_macro m600cfg"].fast_speed|int}
    G90 ; Absolute postitioning
    STATUS_BUSY


###### LOAD_FILAMENT ######
# 
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set SLOW = params.SLOW|default(printer["gcode_macro m600cfg"].load_slow)|float %} ; Purge amount
    {% set FAST = params.FAST|default(printer["gcode_macro m600cfg"].load_fast)|float %} ; Load length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% if printer["gcode_macro m600cfg"].prev_temp != 0 %}
        {% set TARGET = printer["gcode_macro m600cfg"].prev_temp %}
        SET_GCODE_VARIABLE MACRO=M600 VARIABLE=prev_temp VALUE=0
    {% elif params.TARGET is defined  %} ; If current temp is below target
        {% set TARGET = params.TARGET|int %}
    {% endif %}
    {% if printer.extruder.target < printer.configfile.config.extruder.min_extrude_temp|int %} ; Verify extruder is hot enough
        {% set TARGET = printer["gcode_macro m600cfg"].default_temp %} ; Heat up to default temp
    {% endif %}
    STATUS_HEATING
    M{printer["gcode_macro m600cfg"].output|int} Heating nozzle...
    M109 S{TARGET} ; Heat nozzle to target temperature
    STATUS_M701
    M117  LOADING...
    G91 ; Relative positioning
    G1 E25.0 F1000 ; pre-load
    G1 E{FAST} F{printer["gcode_macro m600cfg"].fast_speed|int} ; load up to hotend
    G4 P900 ; wait a moment
    G1 E{SLOW} F250 ; purge to change filament
    G90 ; Absolute postitioning
    SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
    STATUS_READY


###### PURGE ######
# 
# Edit the default() value for LENGTH
# to the amount of filament you'd like to purge
# 
[gcode_macro PURGE]
gcode:
    {% set LENGTH = params.LENGTH|default(printer["gcode_macro m600cfg"].unload_length)|float %} ; Purge length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% if cur_temp|int < TARGET|int and params.TARGET is defined %} ; If current temp is below target
        STATUS_HEATING
        M{printer["gcode_macro m600cfg"].output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
        STATUS_HEATING
        M{printer["gcode_macro m600cfg"].output|int} Below minimum temp. Heating extruder...
        M109 S{printer["gcode_macro m600cfg"].default_temp} ; Heat up to default temp
    {% endif %}
    STATUS_M701
    M117 PURGING..
    G91 ; Relative positioning
    G1 E{LENGTH} F250 ; Purge 45mm of filament
    G90 ; Absolute postitioning
    STATUS_READY

[delayed_gcode AUTO_DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro ENABLEFILAMENTSENSOR]
description: Activates filament sensor   
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro DISABLEFILAMENTSENSOR]
description: Deactivates filament sensor
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0